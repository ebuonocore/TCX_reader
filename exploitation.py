""" Exploitation des données d'un fichier .tcx 
"""


# ***** Fonctions sur la lecture des données *****
def construire_dico_entete(entete: str) -> dict:
    """Construit un dictionnaire à partir de l'entête"""
    dico = {}
    for ligne in entete.split("\n"):
        if "<Activity Sport=" in ligne:
            dico["Sport"] = ligne.split('"')[1]
        else:
            balise = trouver_balise(ligne)
            if balise is not None:
                dico[balise] = ligne.split(">")[1].split("<")[0]
    return dico


def construire_dico_trackpoint(trackpoint: str) -> dict:
    """Construit un dictionnaire à partir d'un trackpoint"""
    dico = {}
    for ligne in trackpoint.split("\n"):
        balise = trouver_balise(ligne)
        if balise is not None:
            dico[balise] = ligne.split(">")[1].split("<")[0]
    return dico


def trouver_balise(ligne: str) -> str:
    """Renvoie le nom de la balise de la ligne, sinon renvoie None"""
    if "<" not in ligne:
        return None
    if ">" not in ligne:
        return None
    debut = ligne.find("<")
    fin = ligne.find(">")
    balise = ligne[debut + 1 : fin]
    if "</" + balise + ">" in ligne:
        return balise


def construire_activite(activite: str) -> list:
    """Construit la liste des dictionnaires des trackpoints de l'activité"""
    clefs_attendues = [
        "Time",
        "LatitudeDegrees",
        "LongitudeDegrees",
        "AltitudeMeters",
        "DistanceMeters",
        "Speed",
        "RunCadence",
    ]
    liste_trackpoints = []
    trackpoints = activite.split("<Trackpoint>")
    for trackpoint in trackpoints:
        dico = construire_dico_trackpoint(trackpoint)
        if all(clef in dico for clef in clefs_attendues):
            liste_trackpoints.append(dico)
    return liste_trackpoints
